"""
Student Helper Bot - Telegram-–±–æ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ (–ª–∏—á–Ω—ã–µ –∏ –æ–±—â–∏–µ)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö
- –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
- –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
- –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è)

–ê–≤—Ç–æ—Ä: Student Helper Bot Team
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import logging
import json
import os
import asyncio
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, List, Set

from apscheduler.schedulers.background import BackgroundScheduler

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    BotCommand,
    Chat,
    Bot
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

################################################################################
#                            CONFIG                                            #
################################################################################

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    CHAT_ID = int(os.getenv("CHAT_ID", "0"))
    ALLOWED_GROUP_ID = int(os.getenv("ALLOWED_GROUP_ID", "0"))

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    BASE_DIR = Path(__file__).parent
    DATA_DIR = BASE_DIR / 'data'

    USERS_FILE = DATA_DIR / 'users.json'
    ACTIONS_FILE = DATA_DIR / 'user_actions.json'
    BIRTHDAYS_FILE = DATA_DIR / 'happy.json'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
    
    @classmethod
    def validate(cls):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if not cls.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if cls.CHAT_ID == 0:
            raise ValueError("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if cls.ALLOWED_GROUP_ID == 0:
            raise ValueError("ALLOWED_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")


################################################################################
#                       GLOBAL VARIABLES FOR DEADLINES                         #
################################################################################

# –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —É –Ω–∞—Å –±—ã–ª STICKER_ID, –Ω–æ –º—ã —É–±–∏—Ä–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∏–∫–µ—Ä–æ–≤.
STICKER_ID = "(NoSticker)"  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º.
DEADLINES_FILE = "deadlines_data.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–¥–ª–∞–π–Ω–æ–≤
deadlines = []

# –ì—Ä—É–ø–ø–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±—â–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤
group_chat_id = None

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –∑–Ω–∞–µ–º
known_users = set()


################################################################################
#                          DATABASE                                            #
################################################################################

class Database:
    @staticmethod
    def load_json(file_path: Path, default: Any = None) -> Any:
        if file_path.exists():
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        return default

    @staticmethod
    def save_json(file_path: Path, data: Any) -> None:
        file_path.parent.mkdir(parents=True, exist_ok=True)
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {file_path}: {e}")


################################################################################
#                          USER MANAGER                                        #
################################################################################

class UserManager:
    def __init__(self, users_file: Path):
        self.users_file = users_file
        self.users: Set[str] = set(Database.load_json(users_file, default=[]))

    def add_user(self, user_id: str):
        self.users.add(user_id)
        Database.save_json(self.users_file, list(self.users))

    def get_users(self) -> Set[str]:
        return self.users


################################################################################
#                ACTION MANAGER                                               #
################################################################################

class ActionManager:
    """ –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤–∏–¥–∞ "–ü–æ–∑–≤–∞—Ç—å –ø–∏—Ç—å –ø–∏–≤–æ" –∏ —Ç.–ø. """

    def __init__(self, actions_file: Path):
        self.actions_file = actions_file
        self.user_actions = Database.load_json(actions_file, default={})

    def can_perform_action(self, user_id: str, action_type: str) -> bool:
        now = datetime.now()
        last_str = self.user_actions.get(user_id, {}).get(action_type)
        if last_str:
            last_dt = datetime.fromisoformat(last_str)
            if now - last_dt < timedelta(days=7):
                return False
        return True

    def update_action_time(self, user_id: str, action_type: str):
        now_str = datetime.now().isoformat()
        if user_id not in self.user_actions:
            self.user_actions[user_id] = {}
        self.user_actions[user_id][action_type] = now_str
        Database.save_json(self.actions_file, self.user_actions)


################################################################################
#                       DEADLINES: LOAD/SAVE + FUNCTIONS                       #
################################################################################

def remove_duplicate_deadlines():
    global deadlines
    unique_deadlines = []
    seen = set()

    for d in deadlines:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        key = f"{d['subject']}_{d['title']}_{d['due_date'].isoformat()}_{d['description']}"
        if key not in seen:
            seen.add(key)
            unique_deadlines.append(d)

    deadlines = unique_deadlines
    save_deadlines()
    logging.info(f"–£–¥–∞–ª–µ–Ω–æ {len(deadlines) - len(unique_deadlines)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–µ–¥–ª–∞–π–Ω–æ–≤")


def load_deadlines():
    global deadlines
    try:
        if os.path.exists(DEADLINES_FILE):
            with open(DEADLINES_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                for d in data:
                    d["due_date"] = datetime.fromisoformat(d["due_date"])
                deadlines = data
                remove_duplicate_deadlines()  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(deadlines)} –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
        else:
            deadlines = []
            save_deadlines()
            logging.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–µ–¥–ª–∞–π–Ω–æ–≤")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏: {e}")
        deadlines = []


def save_deadlines():
    global deadlines
    data_to_save = []
    for d in deadlines:
        d_copy = dict(d)
        d_copy["due_date"] = d["due_date"].isoformat()
        data_to_save.append(d_copy)

    with open(DEADLINES_FILE, "w", encoding="utf-8") as f:
        json.dump(data_to_save, f, ensure_ascii=False, indent=2)


################################################################################
#                      DEADLINE REMINDER JOBS (APScheduler)                   #
################################################################################

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤
deadline_scheduler = BackgroundScheduler(timezone="Asia/Yekaterinburg")
deadline_scheduler.start()

async def send_deadline_notification(chat_id, due_time, days_before, deadline_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ"""
    try:
        from telegram import Bot
        bot = Bot(token=Config.BOT_TOKEN)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
        if days_before == 0:
            urgency_text = "üìå <b>–í–ù–ò–ú–ê–ù–ò–ï! –î–µ–¥–ª–∞–π–Ω –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –°–ï–ì–û–î–ù–Ø!</b>"
        elif days_before == 1:
            urgency_text = "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª—Å—è 1 –¥–µ–Ω—å!</b>"
        elif days_before == 3:
            urgency_text = "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å 3 –¥–Ω—è!</b>"
        elif days_before == 5:
            urgency_text = "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å 5 –¥–Ω–µ–π!</b>"
        else:
            urgency_text = f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {days_before} –¥–Ω–µ–π!</b>"
        
        msg_text = (
            f"{urgency_text}\n\n"
            f"üìï –ü—Ä–µ–¥–º–µ—Ç: {deadline_data['subject']}\n"
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: {deadline_data['title']}\n"
            f"üìÖ –î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞: {due_time.strftime('%Y-%m-%d %H:%M')}\n"
            f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {deadline_data['description']}\n"
        )
        
        # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –ª–∏—á–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é
        if deadline_data["is_private"]:
            try:
                await bot.send_message(
                    chat_id=deadline_data["created_by_id"],
                    text=f"üîí <b>–õ–∏—á–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω</b>\n{msg_text}",
                    parse_mode='HTML'
                )
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {deadline_data['created_by_id']} –æ –¥–µ–¥–ª–∞–π–Ω–µ ID={deadline_data['deadline_id']}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {deadline_data['created_by_id']}: {e}")
        
        # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –æ–±—â–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –¥–ª—è –æ–±—â–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤
            author_mention = f"<a href=\"tg://user?id={deadline_data['created_by_id']}\">{deadline_data['author_name']}</a>"
            msg_text += f"üë§ –ê–≤—Ç–æ—Ä: {author_mention}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
            global group_chat_id
            target_chat_id = group_chat_id if group_chat_id else Config.CHAT_ID
            
            try:
                await bot.send_message(
                    chat_id=target_chat_id,
                    text=msg_text,
                    parse_mode='HTML'
                )
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ –¥–µ–¥–ª–∞–π–Ω–µ ID={deadline_data['deadline_id']} (–∑–∞ {days_before} –¥–Ω–µ–π)")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ª–∏—á–∫—É
            for user_id in known_users:
                try:
                    personal_msg = f"üì¢ <b>–û–±—â–∏–π –¥–µ–¥–ª–∞–π–Ω</b>\n{msg_text}"
                    await bot.send_message(
                        chat_id=user_id,
                        text=personal_msg,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_deadline_notification: {e}")


def schedule_deadline_reminders(deadline_data: dict, context=None) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–µ –∑–∞ 0, 1, 3, 5 –¥–Ω–µ–π"""
    try:
        due_time = deadline_data["due_date"]
        deadline_id = deadline_data["deadline_id"]
        chat_id = deadline_data.get("created_in_chat", Config.CHAT_ID)
        
        # –°–ø–∏—Å–æ–∫ —Å–º–µ—â–µ–Ω–∏–π: 0, 1, 3, 5 –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        offsets = [0, 1, 3, 5]
        now = datetime.now()
        
        for days_before in offsets:
            run_time = due_time - timedelta(days=days_before)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
            if run_time > now:
                job_id = f"deadline_{deadline_id}_{days_before}days"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                deadline_scheduler.add_job(
                    func=lambda c=chat_id, dt=due_time, db=days_before, dd=deadline_data: asyncio.run(
                        send_deadline_notification(c, dt, db, dd)
                    ),
                    trigger='date',
                    run_date=run_time,
                    id=job_id,
                    replace_existing=True  # –ó–∞–º–µ–Ω—è–µ–º –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                )
                
                logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞ ID={deadline_id} –∑–∞ {days_before} –¥–Ω–µ–π –Ω–∞ {run_time}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞: {e}")


def cancel_deadline_reminders(deadline_id: int, context=None) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        jobs = deadline_scheduler.get_jobs()
        
        # –ò—â–µ–º –∏ –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        jobs_to_remove = []
        for job in jobs:
            if job.id and job.id.startswith(f"deadline_{deadline_id}_"):
                jobs_to_remove.append(job.id)
        
        for job_id in jobs_to_remove:
            try:
                deadline_scheduler.remove_job(job_id)
                logging.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job_id}")
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏ {job_id}: {e}")
        
        logging.info(f"–û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞ ID={deadline_id}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞ {deadline_id}: {e}")


def restore_deadline_reminders(context=None) -> None:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        now = datetime.now()
        restored_count = 0
        
        for deadline in deadlines:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã
            if deadline["due_date"] > now:
                schedule_deadline_reminders(deadline)
                restored_count += 1
        
        logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è {restored_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏
async def callback_deadline_reminder(context) -> None:
    """Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏"""
    try:
        data = context.job.context
        chat_id = data.get("chat_id", Config.CHAT_ID)
        due_time = datetime.fromisoformat(data["due_date_str"]) if isinstance(data["due_date_str"], str) else data.get("due_time", datetime.now())
        days_before = data["days_before"]
        
        await send_deadline_notification(chat_id, due_time, days_before, data)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_deadline_reminder: {e}")


################################################################################
#                         BIRTHDAYS FUNCTIONS                                  #
################################################################################

def convert_excel_to_json(excel_path, json_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª Excel —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
    logging.error("–§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Excel –≤ JSON –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. Pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    logging.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–π JSON-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.")
    return False

def load_birthdays():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(Config.BIRTHDAYS_FILE):
            # –ß–∏—Ç–∞–µ–º JSON-—Ñ–∞–π–ª
            with open(Config.BIRTHDAYS_FILE, "r", encoding="utf-8") as f:
                birthdays_data = json.load(f)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç datetime
            birthdays = []
            for person in birthdays_data:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    if '–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è' in person and person['–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è']:
                        # –ü–æ–∫–∞ —Ö—Ä–∞–Ω–∏–º –¥–∞—Ç—É –∫–∞–∫ –µ—Å—Ç—å, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ check_birthdays
                        birthdays.append(person)
                    else:
                        logging.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å –±–µ–∑ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è: {person}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
            
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(birthdays)} –∑–∞–ø–∏—Å–µ–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ JSON")
            return birthdays
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ Excel, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª Excel
            excel_path = str(Config.BIRTHDAYS_FILE).replace('.json', '.xlsx')
            if os.path.exists(excel_path):
                logging.info(f"–ü—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –≤ JSON: {excel_path}")
                if convert_excel_to_json(excel_path, Config.BIRTHDAYS_FILE):
                    # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    return load_birthdays()
            
            logging.warning(f"–§–∞–π–ª —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {Config.BIRTHDAYS_FILE}")
            return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
        return []

async def check_birthdays(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        birthdays = load_birthdays()
        today = datetime.now().date()
        
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ {today.strftime('%Y-%m-%d')}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(birthdays)} –∑–∞–ø–∏—Å–µ–π")
        birthdays_today = []
        
        for person in birthdays:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ –∑–∞–ø–∏—Å–∏
                birthday_date = person.get('–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
                day = None
                month = None
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º
                if isinstance(birthday_date, str):
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
                    date_formats = [
                        '%Y-%m-%dT%H:%M:%S.%f', 
                        '%Y-%m-%d', 
                        '%d.%m.%Y'
                    ]
                    parsed_date = None
                    
                    # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                    for date_format in date_formats:
                        try:
                            parsed_date = datetime.strptime(birthday_date, date_format)
                            day = parsed_date.day
                            month = parsed_date.month
                            break
                        except ValueError:
                            continue
                    
                    # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                    if not parsed_date:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç "DD –º–µ—Å—è—Ü" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "27 –æ–∫—Ç—è–±—Ä—è")
                        import re
                        month_names = {
                            '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
                            '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
                            '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
                        }
                        
                        match = re.match(r'(\d+)\s+(\w+)', birthday_date)
                        if match:
                            day_str, month_str = match.groups()
                            month_str = month_str.lower()
                            
                            if month_str in month_names:
                                day = int(day_str)
                                month = month_names[month_str]
                                logging.info(f"–†–∞–∑–æ–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å –º–µ—Å—è—Ü': {day_str} {month_str} -> {day}.{month}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º date()
                elif hasattr(birthday_date, 'date'):
                    date_obj = birthday_date.date()
                    day = date_obj.day
                    month = date_obj.month
                # –ï—Å–ª–∏ —ç—Ç–æ datetime
                elif isinstance(birthday_date, datetime):
                    day = birthday_date.day
                    month = birthday_date.month
                
                # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
                if day and month:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º
                    if today.month == month and today.day == day:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
                        first_name = person.get('–∏–º—è', '')
                        last_name = person.get('—Ñ–∞–º–∏–ª–∏—è', '')
                        full_name = f"{last_name} {first_name}".strip()
                        
                        if full_name:
                            birthdays_today.append(full_name)
                            logging.info(f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {full_name}")
                else:
                    logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –¥–ª—è –∑–∞–ø–∏—Å–∏: {person}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {person}: {e}")
                import traceback
                logging.error(traceback.format_exc())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∏
        if birthdays_today:
            # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            if len(birthdays_today) > 1:
                names_list = "\n- ".join(birthdays_today)
                message = (
                    f"üéÇ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è!</b> üéâ\n\n"
                    f"–°–µ–≥–æ–¥–Ω—è —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω—É—é—Ç:\n- {names_list}\n\n"
                    f"–ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, —É—Å–ø–µ—Ö–æ–≤ –≤ —É—á–µ–±–µ –∏ –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ! üéÅü•≥"
                )
            else:
                # –û–¥–∏–Ω –∏–º–µ–Ω–∏–Ω–Ω–∏–∫
                message = (
                    f"üéÇ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è!</b> üéâ\n\n"
                    f"–°–µ–≥–æ–¥–Ω—è —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω—É–µ—Ç <b>{birthdays_today[0]}</b>!\n\n"
                    f"–ñ–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, —É—Å–ø–µ—Ö–æ–≤ –≤ —É—á–µ–±–µ –∏ –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ! üéÅü•≥"
                )
            
            global group_chat_id
            target_chat_id = group_chat_id if group_chat_id else Config.CHAT_ID
            
            try:
                await bot.send_message(
                    chat_id=target_chat_id,
                    text=message,
                    parse_mode='HTML'
                )
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è {len(birthdays_today)} –ª—é–¥—è–º")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        else:
            logging.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è")
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")


################################################################################
#               CALLBACK HANDLERS (CONTACTS)                                  #
################################################################################

class CallbackHandlers:
    @staticmethod
    async def contact_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()
        data = query.data

        contacts = {
            'contact_1': (
                "üìå <b>–£—á–µ–±–Ω–∞—è —á–∞—Å—Ç—å</b>:\n"
                "üë©‚Äçüíº –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è: <b>[–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞]</b>\n"
                "üìû –¢–µ–ª: +7 XXX XXX-XX-XX –¥–æ–±. XXXX\n"
                "üí¨ Telegram: @your_admin_username\n"
                "üìç [–í–∞—à –≥–æ—Ä–æ–¥], [–∞–¥—Ä–µ—Å], –∫–∞–±.[–Ω–æ–º–µ—Ä]\n"
                "‚è∞ 09:30 - 18:00"
            ),
            'contact_2': (
                "üë©‚Äçüíº <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º—ã</b>:\n"
                "üë©‚Äçüè´ <b>[–ò–º—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è]</b>\n"
                "üìû +7 XXX XXX-XX-XX –¥–æ–±.XXXX\n"
                "üí¨ Telegram: @your_manager_username\n"
                "üì± +7 XXX XXX XX XX"
            )
        }

        if data in contacts:
            text = contacts[data]
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]]
            await query.edit_message_text(
                text=text, 
                parse_mode='HTML', 
                reply_markup=InlineKeyboardMarkup(kb)
            )
        elif data == 'main_menu':
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.")

    @staticmethod
    async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()
        data = query.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–∑–æ–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π
        action_mapping = {
            'call_beer': 'beer',
            'call_board_games': 'board_games',
            'call_cinema': 'cinema',
            'call_walk': 'walk'
        }

        if data in action_mapping:
            action_type = action_mapping[data]
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=query.message.message_id
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä CommandHandlers –∏–∑ bot_data
            cmd_handlers = context.application.bot_data['command_handlers']
            
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            await cmd_handlers._call_action(update, context, action_type)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
        if data == "pay_education":
            payment_url = "https://your-payment-system.com/payment"
            await query.edit_message_text(
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                f"<a href='{payment_url}'>–û–ø–ª–∞—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ</a>",
                parse_mode='HTML',
                disable_web_page_preview=False
            )
            return

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if data == "calc_diploma":
            context.user_data['state'] = 'diploma_average'
            if update.effective_chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
                await query.message.reply_text(
                    "üìä <b>–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –¥–∏–ø–ª–æ–º–∞</b>\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–æ—Ç 1 –¥–æ 10).\n"
                    "–ü—Ä–∏–º–µ—Ä: 8 9 7.5 8.5 9",
                    parse_mode='HTML'
                )
            else:
                await query.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è <b>–¥–∏–ø–ª–æ–º–∞</b> (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).",
                    parse_mode='HTML'
                )

        elif data == "calc_subject":
            context.user_data['state'] = 'subject_average'
            if update.effective_chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
                await query.message.reply_text(
                    "üìä <b>–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–æ—Ç 1 –¥–æ 10).\n"
                    "–ü—Ä–∏–º–µ—Ä: 8 9 7.5 8.5 9",
                    parse_mode='HTML'
                )
            else:
                await query.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è <b>–ø—Ä–µ–¥–º–µ—Ç–∞</b> (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).",
                    parse_mode='HTML'
                )

        elif data == "contacts":
            kb = [
                [InlineKeyboardButton("–£—á–µ–±–Ω–∞—è —á–∞—Å—Ç—å", callback_data='contact_1'),
                 InlineKeyboardButton("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data='contact_2')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')]
            ]
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:",
                reply_markup=InlineKeyboardMarkup(kb)
            )

        elif data == "deadlines":
            kb = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="deadline_add"),
                 InlineKeyboardButton("üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ", callback_data="deadline_list_actual")],
                [InlineKeyboardButton("üìã –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ", callback_data="deadline_list_expired"),
                 InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="deadline_remove")],
                [InlineKeyboardButton("üì¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="deadline_group"),
                 InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="deadline_help")]
            ]
            await query.edit_message_text(
                "üóì <b>–ú–µ–Ω—é –¥–µ–¥–ª–∞–π–Ω–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(kb),
                parse_mode='HTML'
            )


################################################################################
#                KEYBOARDS                                                    #
################################################################################

class Keyboards:
    @staticmethod
    def get_main_keyboard() -> ReplyKeyboardMarkup:
        keyboard = [
            [KeyboardButton("üéì –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –¥–∏–ø–ª–æ–º–∞")],
            [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")],
            [KeyboardButton("üìö –ë–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É")],
            [KeyboardButton("üç∫ –ü–æ–∑–≤–∞—Ç—å –ø–∏—Ç—å –ø–∏–≤–æ"), KeyboardButton("üé≤ –ü–æ–∑–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏")],
            [KeyboardButton("üé• –ü–æ–∑–≤–∞—Ç—å –≤ –∫–∏–Ω–æ"), KeyboardButton("üö∂ –ü–æ–∑–≤–∞—Ç—å –≥—É–ª—è—Ç—å")],
            [KeyboardButton("üóì –î–µ–¥–ª–∞–π–Ω—ã"), KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —É—á–µ–±—É")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


################################################################################
#        STATES FOR ADDING OR REMOVING DEADLINE (STEP-BY-STEP)                #
################################################################################

ADD_DEADLINE_FLOW = {
    'IS_PRIVATE': 1,
    'SUBJECT': 2,
    'TITLE': 3,
    'DATE': 4,
    'COMMENT': 5,
    'DONE': 6
}

REMOVE_DEADLINE_FLOW = {
    'ASK_ID': 1,
    'DONE': 2
}


################################################################################
#                 INLINE CALLBACK FOR DEADLINE MENU                           #
################################################################################

async def deadline_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "deadline_add":
        context.user_data['deadline_flow'] = {}
        context.user_data['deadline_flow_step'] = ADD_DEADLINE_FLOW['IS_PRIVATE']
        await query.edit_message_text("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –õ–ò–ß–ù–´–ô (–≤–≤–µ–¥–∏—Ç–µ '–õ–∏—á–Ω—ã–π') –∏–ª–∏ –û–ë–©–ò–ô (–≤–≤–µ–¥–∏—Ç–µ '–û–±—â–∏–π') –¥–µ–¥–ª–∞–π–Ω?")

    elif data in ["deadline_list", "deadline_list_actual", "deadline_list_expired"]:
        user_id = query.from_user.id
        if not deadlines:
            msg = "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞!"
            await query.edit_message_text(msg, parse_mode='HTML')
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        current_date = datetime.now()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        filtered_deadlines = []
        is_expired_list = (data == "deadline_list_expired")
        list_title = "—É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö" if is_expired_list else "–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö"
        
        for d in deadlines:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—á–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if d["is_private"] and d["created_by_id"] != user_id:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–¥–ª–∞–π–Ω–∞
            is_expired = d["due_date"] < current_date
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É —Ç–∏–ø—É
            if (is_expired and is_expired_list) or (not is_expired and not is_expired_list):
                filtered_deadlines.append(d)
        
        if not filtered_deadlines:
            msg = f"–ù–µ—Ç {list_title} –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
            await query.edit_message_text(msg, parse_mode='HTML')
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        msg = f"üìã <b>–°–ø–∏—Å–æ–∫ {list_title} –¥–µ–¥–ª–∞–π–Ω–æ–≤</b>:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
        kb = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="deadlines")]]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        await query.edit_message_text(msg, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(kb))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–¥–ª–∞–π–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for d in filtered_deadlines:
            try:
                date_str = d["due_date"].strftime("%Y-%m-%d %H:%M")
                try:
                    author_name = d.get('author_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    author_mention = f"<a href=\"tg://user?id={d['created_by_id']}\">{author_name}</a>"
                except:
                    author_mention = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                
                deadline_msg = (
                    f"üìå <b>ID: {d['deadline_id']}</b>\n"
                    f"üìï –ü—Ä–µ–¥–º–µ—Ç: {d['subject']}\n"
                    f"üìù –ó–∞–¥–∞–Ω–∏–µ: {d['title']}\n"
                    f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                    f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {d['description']}\n"
                    f"üîí –õ–∏—á–Ω—ã–π: {'–î–∞' if d['is_private'] else '–ù–µ—Ç'}\n"
                    f"üë§ –ê–≤—Ç–æ—Ä: {author_mention}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=deadline_msg,
                    parse_mode='HTML'
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–¥–ª–∞–π–Ω–∞: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    elif data == "deadline_group":
        await query.edit_message_text("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É: /set_group (–≤ –≥—Ä—É–ø–ø–µ)")

    elif data == "deadline_help":
        await query.edit_message_text("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help")

    elif data == "deadline_remove":
        context.user_data['remove_flow_step'] = REMOVE_DEADLINE_FLOW['ASK_ID']
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –¥–µ–¥–ª–∞–π–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


################################################################################
#          MAIN COMMAND HANDLERS CLASS (START / MENU / ETC.)                  #
################################################################################

class CommandHandlers:
    def __init__(self, user_manager, action_manager):
        self.user_manager = user_manager
        self.action_manager = action_manager

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = str(update.effective_user.id)
        self.user_manager.add_user(user_id)
        known_users.add(update.effective_user.id)

        txt = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫!\n\n"
            "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:\n"
            "/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º\n"
            "/add_deadline - –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω\n"
            "/list_deadlines - –°–ø–∏—Å–æ–∫ –¥–µ–¥–ª–∞–π–Ω–æ–≤\n\n"
            "‚ùóÔ∏è –ù–∞–∂–º–∏—Ç–µ /menu —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫
        await update.message.reply_text(
            txt,
            parse_mode='HTML',
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –ª—é–±—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )

    async def handle_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        txt = update.message.text.strip()

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        if txt == "/menu":
            kb = [
                [InlineKeyboardButton("üéì –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –¥–∏–ø–ª–æ–º–∞", callback_data="calc_diploma"),
                 InlineKeyboardButton("üìö –ë–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É", callback_data="calc_subject")],
                [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
                 InlineKeyboardButton("üóì –î–µ–¥–ª–∞–π–Ω—ã", callback_data="deadlines")],
                [InlineKeyboardButton("üç∫ –ü–æ–∑–≤–∞—Ç—å –ø–∏—Ç—å –ø–∏–≤–æ", callback_data="call_beer"),
                 InlineKeyboardButton("üé≤ –ü–æ–∑–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏", callback_data="call_board_games")],
                [InlineKeyboardButton("üé• –ü–æ–∑–≤–∞—Ç—å –≤ –∫–∏–Ω–æ", callback_data="call_cinema"),
                 InlineKeyboardButton("üö∂ –ü–æ–∑–≤–∞—Ç—å –≥—É–ª—è—Ç—å", callback_data="call_walk")],
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —É—á–µ–±—É", callback_data="pay_education")]
            ]
            await update.message.reply_text(
                "üî∏ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(kb),
                parse_mode='HTML'
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.effective_chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
            if update.effective_chat.id != Config.ALLOWED_GROUP_ID:
                await update.message.reply_text("‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ!")
                return

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é...
        if txt == "üéì –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –¥–∏–ø–ª–æ–º–∞":
            context.user_data['state'] = 'diploma_average'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if update.effective_chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
                await update.message.reply_text(
                    "üìä <b>–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –¥–∏–ø–ª–æ–º–∞</b>\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–æ—Ç 1 –¥–æ 10).\n"
                    "–ü—Ä–∏–º–µ—Ä: 8 9 7.5 8.5 9",
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è <b>–¥–∏–ø–ª–æ–º–∞</b> (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).",
                    parse_mode='HTML'
                )
        elif txt == "üìö –ë–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É":
            context.user_data['state'] = 'subject_average'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if update.effective_chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
                await update.message.reply_text(
                    "üìä <b>–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–æ—Ç 1 –¥–æ 10).\n"
                    "–ü—Ä–∏–º–µ—Ä: 8 9 7.5 8.5 9",
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è <b>–ø—Ä–µ–¥–º–µ—Ç–∞</b> (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).",
                    parse_mode='HTML'
                )
        elif txt == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏":
            kb = [
                [InlineKeyboardButton("–£—á–µ–±–Ω–∞—è —á–∞—Å—Ç—å", callback_data='contact_1'),
                 InlineKeyboardButton("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data='contact_2')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')]
            ]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:", reply_markup=InlineKeyboardMarkup(kb))
        elif txt in ["üç∫ –ü–æ–∑–≤–∞—Ç—å –ø–∏—Ç—å –ø–∏–≤–æ", "üé≤ –ü–æ–∑–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏", "üé• –ü–æ–∑–≤–∞—Ç—å –≤ –∫–∏–Ω–æ", "üö∂ –ü–æ–∑–≤–∞—Ç—å –≥—É–ª—è—Ç—å"]:
            mapping = {
                "üç∫ –ü–æ–∑–≤–∞—Ç—å –ø–∏—Ç—å –ø–∏–≤–æ": "beer",
                "üé≤ –ü–æ–∑–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏": "board_games",
                "üé• –ü–æ–∑–≤–∞—Ç—å –≤ –∫–∏–Ω–æ": "cinema",
                "üö∂ –ü–æ–∑–≤–∞—Ç—å –≥—É–ª—è—Ç—å": "walk"
            }
            action_type = mapping.get(txt)
            await self._call_action(update, context, action_type)
        elif txt == "üóì –î–µ–¥–ª–∞–π–Ω—ã":
            kb = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="deadline_add"),
                 InlineKeyboardButton("üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ", callback_data="deadline_list_actual")],
                [InlineKeyboardButton("üìã –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ", callback_data="deadline_list_expired"),
                 InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="deadline_remove")],
                [InlineKeyboardButton("üì¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="deadline_group"),
                 InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="deadline_help")]
            ]
            await update.message.reply_text(
                "üóì <b>–ú–µ–Ω—é –¥–µ–¥–ª–∞–π–Ω–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(kb),
                parse_mode='HTML'
            )
        elif txt == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —É—á–µ–±—É":
            payment_url = "https://your-payment-system.com/payment"
            await update.message.reply_text(
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                f"<a href='{payment_url}'>–û–ø–ª–∞—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ</a>",
                parse_mode='HTML',
                disable_web_page_preview=False
            )

    async def diploma_cmd(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        context.user_data['state'] = 'diploma_average'
        if update.effective_chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
            await update.message.reply_text(
                "üìä <b>–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –¥–∏–ø–ª–æ–º–∞</b>\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–æ—Ç 1 –¥–æ 10).\n"
                "–ü—Ä–∏–º–µ—Ä: 8 9 7.5 8.5 9",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è <b>–¥–∏–ø–ª–æ–º–∞</b> (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).",
                parse_mode='HTML'
            )

    async def subject_cmd(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        context.user_data['state'] = 'subject_average'
        if update.effective_chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
            await update.message.reply_text(
                "üìä <b>–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–æ—Ç 1 –¥–æ 10).\n"
                "–ü—Ä–∏–º–µ—Ä: 8 9 7.5 8.5 9",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è <b>–ø—Ä–µ–¥–º–µ—Ç–∞</b> (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).",
                parse_mode='HTML'
            )

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        state = context.user_data.get('state')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update.message –Ω–µ None –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ text
        if not update.message:
            return
            
        txt = update.message.text.strip()

        if update.effective_user:
            known_users.add(update.effective_user.id)

        flow_step = context.user_data.get('deadline_flow_step')
        remove_flow_step = context.user_data.get('remove_flow_step')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.effective_chat.type in [Chat.GROUP, Chat.SUPERGROUP]:
            if update.effective_chat.id != Config.ALLOWED_GROUP_ID:
                await update.message.reply_text("‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ!")
                return

        if flow_step:
            await self._deadline_flow_handler(update, context, txt)
            return
        elif remove_flow_step:
            await self._deadline_remove_handler(update, context, txt)
            return
        elif state == 'diploma_average':
            await self._calc_average(update, context, txt, is_diploma=True)
        elif state == 'subject_average':
            await self._calc_average(update, context, txt, is_diploma=False)
        elif update.message and update.message.text:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é
            menu_commands = {
                "üéì –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –¥–∏–ø–ª–æ–º–∞",
                "üìö –ë–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É",
                "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                "üóì –î–µ–¥–ª–∞–π–Ω—ã",
                "üç∫ –ü–æ–∑–≤–∞—Ç—å –ø–∏—Ç—å –ø–∏–≤–æ",
                "üé≤ –ü–æ–∑–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏",
                "üé• –ü–æ–∑–≤–∞—Ç—å –≤ –∫–∏–Ω–æ",
                "üö∂ –ü–æ–∑–≤–∞—Ç—å –≥—É–ª—è—Ç—å"
            }
            if txt in menu_commands:
                await self.handle_menu(update, context)
            elif update.effective_chat.type == Chat.PRIVATE:
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
                await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.")

    async def _deadline_flow_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE, txt: str) -> None:
        step = context.user_data['deadline_flow_step']
        flow_data = context.user_data.setdefault('deadline_flow', {})

        if step == ADD_DEADLINE_FLOW['IS_PRIVATE']:
            txt_lower = txt.lower()
            if '–ª–∏—á–Ω' in txt_lower:
                flow_data['is_private'] = True
                await update.message.reply_text("–û–∫, —Å–æ–∑–¥–∞—ë–º –õ–ò–ß–ù–´–ô –¥–µ–¥–ª–∞–π–Ω. –í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–µ–¥–º–µ—Ç</b>.",
                                                parse_mode='HTML')
                context.user_data['deadline_flow_step'] = ADD_DEADLINE_FLOW['SUBJECT']
            elif '–æ–±—â' in txt_lower:
                flow_data['is_private'] = False
                await update.message.reply_text("–û–∫, —Å–æ–∑–¥–∞—ë–º –û–ë–©–ò–ô –¥–µ–¥–ª–∞–π–Ω. –í–≤–µ–¥–∏—Ç–µ <b>–ø—Ä–µ–¥–º–µ—Ç</b>.", parse_mode='HTML')
                context.user_data['deadline_flow_step'] = ADD_DEADLINE_FLOW['SUBJECT']
            else:
                await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –í–≤–µ–¥–∏—Ç–µ '–õ–∏—á–Ω—ã–π' –∏–ª–∏ '–û–±—â–∏–π'.")

        elif step == ADD_DEADLINE_FLOW['SUBJECT']:
            flow_data['subject'] = txt
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>.", parse_mode='HTML')
            context.user_data['deadline_flow_step'] = ADD_DEADLINE_FLOW['TITLE']

        elif step == ADD_DEADLINE_FLOW['TITLE']:
            flow_data['title'] = txt
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞</b> (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:mm).",
                                            parse_mode='HTML')
            context.user_data['deadline_flow_step'] = ADD_DEADLINE_FLOW['DATE']

        elif step == ADD_DEADLINE_FLOW['DATE']:
            try:
                date_test = datetime.strptime(txt, "%Y-%m-%d %H:%M")
                if date_test.date() < datetime.now().date():
                    await update.message.reply_text("‚ùå –î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞! –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É (YYYY-MM-DD HH:mm).")
                else:
                    flow_data['due_date_str'] = txt
                    await update.message.reply_text("–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–æ–ø–∏—Å–∞–Ω–∏–µ</b>.",
                                                    parse_mode='HTML')
                    context.user_data['deadline_flow_step'] = ADD_DEADLINE_FLOW['COMMENT']
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (YYYY-MM-DD HH:mm).")

        elif step == ADD_DEADLINE_FLOW['COMMENT']:
            flow_data['description'] = txt

            global deadlines
            is_private = flow_data['is_private']
            subject = flow_data['subject']
            title = flow_data['title']
            due_date_str = flow_data['due_date_str']
            description = flow_data['description']

            try:
                due_date = datetime.strptime(due_date_str, "%Y-%m-%d %H:%M")
                new_deadline_id = len(deadlines) + 1
                created_by_id = update.effective_user.id
                created_in_chat = update.effective_chat.id
                author_mention = f'<a href="tg://user?id={created_by_id}">{update.effective_user.full_name}</a>'

                new_deadline = {
                    "deadline_id": new_deadline_id,
                    "title": title,
                    "subject": subject,
                    "description": description,
                    "due_date": due_date,
                    "is_private": is_private,
                    "created_by_id": created_by_id,
                    "created_in_chat": created_in_chat,
                    "author_name": update.effective_user.full_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
                }

                deadlines.append(new_deadline)
                save_deadlines()

                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                schedule_deadline_reminders(new_deadline)

                visibility_emo = "(–õ–∏—á–Ω—ã–π)" if is_private else "(–û–±—â–∏–π)"
                msg = (
                    f"‚úÖ <b>–î–µ–¥–ª–∞–π–Ω –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n"
                    f"ID: {new_deadline_id}\n"
                    f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                    f"–ó–∞–¥–∞–Ω–∏–µ: {title}\n"
                    f"–î–∞—Ç–∞: {due_date_str}\n"
                    f"–¢–∏–ø: {visibility_emo}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"–ê–≤—Ç–æ—Ä: {author_mention}"
                )
                await update.message.reply_text(msg, parse_mode='HTML')

                if not is_private:
                    global group_chat_id
                    target_chat_id = group_chat_id if group_chat_id else created_in_chat
                    msg_text = (
                        f"‚ö†Ô∏è <b>–ù–æ–≤—ã–π –û–ë–©–ò–ô –¥–µ–¥–ª–∞–π–Ω!</b>\n"
                        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                        f"–ó–∞–¥–∞–Ω–∏–µ: {title}\n"
                        f"–î–∞—Ç–∞: {due_date_str}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                        f"–ê–≤—Ç–æ—Ä: {author_mention}"
                    )
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–µ –≤ –Ω–µ–π
                        if update.effective_chat.type == Chat.PRIVATE:
                            await context.bot.send_message(chat_id=target_chat_id, text=msg_text, parse_mode='HTML')
                            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–º –¥–µ–¥–ª–∞–π–Ω–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞")
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ª–∏—á–∫—É
                    for uid in known_users:
                        if uid != created_by_id:
                            try:
                                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–º—É, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –¥–µ–¥–ª–∞–π–Ω
                                await context.bot.send_message(
                                    chat_id=uid,
                                    text=f"(–û–±—â–∏–π –¥–µ–¥–ª–∞–π–Ω) {msg_text}",
                                    parse_mode='HTML'
                                )
                            except Exception as e:
                                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° user_id={uid}: {e}")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞: {e}")
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞.")

            context.user_data['deadline_flow_step'] = None
            context.user_data['deadline_flow'] = {}

    async def _deadline_remove_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE, txt: str) -> None:
        step = context.user_data['remove_flow_step']
        if step == REMOVE_DEADLINE_FLOW['ASK_ID']:
            try:
                deadline_id = int(txt)
                found_index = None
                global deadlines, group_chat_id
                removed = None

                for i, dl in enumerate(deadlines):
                    if dl['deadline_id'] == deadline_id:
                        found_index = i
                        removed = dl
                        break

                if found_index is not None:
                    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª—è–µ–º–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                    cancel_deadline_reminders(deadline_id)
                    
                    deadlines.pop(found_index)
                    save_deadlines()

                    remover_mention = f'<a href="tg://user?id={update.effective_user.id}">{update.effective_user.full_name}</a>'

                    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ, –≥–¥–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
                    await update.message.reply_text(
                        f"‚ùå –î–µ–¥–ª–∞–π–Ω ID={deadline_id} —É–¥–∞–ª—ë–Ω!\n"
                        f"–ü—Ä–µ–¥–º–µ—Ç: {removed['subject']} / –ó–∞–¥–∞–Ω–∏–µ: {removed['title']}\n"
                        f"–£–¥–∞–ª–∏–ª(–∞): {remover_mention}",
                        parse_mode='HTML'
                    )

                    # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –±—ã–ª –æ–±—â–∏–π, —É–≤–µ–¥–æ–º–∏–º –≥—Ä—É–ø–ø—É –ù–ï–ó–ê–í–ò–°–ò–ú–û –æ—Ç –º–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è
                    if not removed['is_private']:
                        target_chat_id = group_chat_id if group_chat_id else Config.CHAT_ID
                        text_for_group = (
                            f"‚ö†Ô∏è <b>–û–±—â–∏–π –¥–µ–¥–ª–∞–π–Ω —É–¥–∞–ª—ë–Ω!</b>\n"
                            f"ID: {deadline_id}\n"
                            f"–ü—Ä–µ–¥–º–µ—Ç: {removed['subject']}\n"
                            f"–ó–∞–¥–∞–Ω–∏–µ: {removed['title']}\n"
                            f"–î–∞—Ç–∞: {removed['due_date'].strftime('%Y-%m-%d %H:%M')}\n"
                            f"–£–¥–∞–ª–∏–ª(–∞): {remover_mention}"
                        )

                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
                            await context.bot.send_message(
                                chat_id=target_chat_id,
                                text=text_for_group,
                                parse_mode='HTML'
                            )

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ª–∏—á–∫—É
                            for user_id in known_users:
                                if user_id != update.effective_user.id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–º—É, –∫—Ç–æ —É–¥–∞–ª–∏–ª
                                    try:
                                        personal_msg = (
                                                           f"‚ùå <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞</b>\n"
                                                           f"{'‚ûñ' * 20}\n\n"
                                                       ) + text_for_group

                                        await context.bot.send_message(
                                            chat_id=user_id,
                                            text=personal_msg,
                                            parse_mode='HTML'
                                        )
                                    except Exception as e:
                                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ user_id={user_id}: {e}")

                        except Exception as e:
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
                else:
                    await update.message.reply_text(
                        f"–ù–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞ —Å —Ç–∞–∫–∏–º ID: {deadline_id}"
                    )
            except ValueError:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID –¥–µ–¥–ª–∞–π–Ω–∞).")

            context.user_data['remove_flow_step'] = None

    async def _calc_average(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str,
                            is_diploma: bool) -> None:
        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∏—Å–ª–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            raw = [x.strip() for x in text.replace(',', ' ').split()]
            if not raw:
                await update.message.reply_text("‚ùå –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
                return

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞
            arr = []
            for num in raw:
                try:
                    n = float(num)
                    if 1 <= n <= 10:  # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è 10-–±–∞–ª–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                        arr.append(n)
                    else:
                        await update.message.reply_text(f"‚ùå –û—Ü–µ–Ω–∫–∞ {n} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-10!")
                        return
                except ValueError:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

            if not arr:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –æ—Ü–µ–Ω–æ–∫ (1-10)!")
                return

            avg = sum(arr) / len(arr)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Å–ª–æ–≤–∞–º–∏
            def get_grade_word(avg):
                if avg >= 9.5:
                    return "–û—Ç–ª–∏—á–Ω–æ —Å –æ—Ç–ª–∏—á–∏–µ–º"
                elif avg >= 8.5:
                    return "–û—Ç–ª–∏—á–Ω–æ"
                elif avg >= 7.0:
                    return "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ"
                elif avg >= 6.0:
                    return "–•–æ—Ä–æ—à–æ"
                elif avg >= 4.0:
                    return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
                else:
                    return "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"

            grade_word = get_grade_word(avg)

            if is_diploma:
                response = (
                    f"üìä <b>–†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –¥–∏–ø–ª–æ–º–∞</b>\n\n"
                    f"–í–≤–µ–¥—ë–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏: {', '.join(map(str, arr))}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(arr)}\n"
                    f"‚ú® –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: <b>{avg:.2f}</b>\n"
                    f"üìù –û—Ü–µ–Ω–∫–∞: <b>{grade_word}</b>"
                )
            else:
                response = (
                    f"üìö <b>–†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n\n"
                    f"–í–≤–µ–¥—ë–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏: {', '.join(map(str, arr))}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {len(arr)}\n"
                    f"‚ú® –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: <b>{avg:.2f}</b>\n"
                    f"üìù –û—Ü–µ–Ω–∫–∞: <b>{grade_word}</b>"
                )

            await update.message.reply_text(response, parse_mode='HTML')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ.")
        finally:
            context.user_data['state'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    async def _call_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action_type: str) -> None:
        user_id = str(update.effective_user.id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if update.callback_query:
            send_message = context.bot.send_message
            chat_id = update.effective_chat.id
        else:
            send_message = update.message.reply_text
            chat_id = update.effective_chat.id

        if not self.action_manager.can_perform_action(user_id, action_type):
            if update.callback_query:
                await send_message(chat_id=chat_id, text="‚ùóÔ∏è –ù–µ–ª—å–∑—è —Ç–∞–∫ —á–∞—Å—Ç–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–¥–µ–ª—é.")
            else:
                await send_message("‚ùóÔ∏è –ù–µ–ª—å–∑—è —Ç–∞–∫ —á–∞—Å—Ç–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–¥–µ–ª—é.")
            return
            
        desc_map = {
            'beer': "–ø–æ–π—Ç–∏ –ø–∏—Ç—å –ø–∏–≤–æ",
            'board_games': "–ø–æ–∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏",
            'cinema': "—Å—Ö–æ–¥–∏—Ç—å –≤ –∫–∏–Ω–æ",
            'walk': "–ø–æ–π—Ç–∏ –≥—É–ª—è—Ç—å"
        }
        desc = desc_map.get(action_type, "—á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å")
        text = f"{update.effective_user.first_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç {desc}! –ö—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è?"

        sent_count = 0
        for uid in self.user_manager.get_users():
            if uid != user_id:
                try:
                    await context.bot.send_message(chat_id=uid, text=text)
                    sent_count += 1
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ user_id={uid}: {e}")

        self.action_manager.update_action_time(user_id, action_type)
        activity_name = desc_map.get(action_type, "–¥–µ–π—Å—Ç–≤–∏–µ").split(" ")[-1]
        
        if update.callback_query:
            await send_message(chat_id=chat_id, text=f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ {activity_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º! ({sent_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)")
        else:
            await send_message(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ {activity_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º! ({sent_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)")

    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –≤–µ–∑–¥–µ (–∏ –≤ –ª–∏—á–∫–µ, –∏ –≤ –≥—Ä—É–ø–ø–µ)
        kb = [
            [InlineKeyboardButton("üéì –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –¥–∏–ø–ª–æ–º–∞", callback_data="calc_diploma"),
             InlineKeyboardButton("üìö –ë–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É", callback_data="calc_subject")],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
             InlineKeyboardButton("üóì –î–µ–¥–ª–∞–π–Ω—ã", callback_data="deadlines")],
            [InlineKeyboardButton("üç∫ –ü–æ–∑–≤–∞—Ç—å –ø–∏—Ç—å –ø–∏–≤–æ", callback_data="call_beer"),
             InlineKeyboardButton("üé≤ –ü–æ–∑–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏", callback_data="call_board_games")],
            [InlineKeyboardButton("üé• –ü–æ–∑–≤–∞—Ç—å –≤ –∫–∏–Ω–æ", callback_data="call_cinema"),
             InlineKeyboardButton("üö∂ –ü–æ–∑–≤–∞—Ç—å –≥—É–ª—è—Ç—å", callback_data="call_walk")],
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —É—á–µ–±—É", callback_data="pay_education")]
        ]
        await update.message.reply_text(
            "üî∏ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(kb),
            parse_mode='HTML'
        )


################################################################################
#           /help, /set_group, /add_deadline, /list_deadlines COMMANDS        #
################################################################################

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "üî∏ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/set_group - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"

        "üî∏ <b>–†–∞–±–æ—Ç–∞ —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏</b>:\n"
        "1Ô∏è‚É£ –ß–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_deadline false –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ '–õ–∞–±1' 2025-03-10 '–†–µ—à–∏—Ç—å 10 –∑–∞–¥–∞—á'\n"
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: private subject title date description\n\n"

        "2Ô∏è‚É£ –ß–µ—Ä–µ–∑ –º–µ–Ω—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):\n"
        "üóì –î–µ–¥–ª–∞–π–Ω—ã ‚û°Ô∏è ‚ûï –î–æ–±–∞–≤–∏—Ç—å\n\n"

        "üî∏ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ</b>:\n"
        "/list_deadlines - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã\n"
        "/remove_deadline ID - –£–¥–∞–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –ø–æ ID\n\n"

        "üî∏ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>:\n"
        "/diploma - –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –¥–∏–ø–ª–æ–º–∞\n"
        "/subject - –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –ø—Ä–µ–¥–º–µ—Ç–∞\n\n"

        "‚ùóÔ∏è <b>–í–∞–∂–Ω–æ</b>: –õ–∏—á–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')


async def set_group_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global group_chat_id
    chat = update.effective_chat
    if chat.type not in (Chat.GROUP, Chat.SUPERGROUP):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥—É /set_group –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!")
        return

    group_chat_id = chat.id
    await update.message.reply_text(
        f"üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω group_chat_id = {group_chat_id}.\n"
        "–¢–µ–ø–µ—Ä—å –û–ë–©–ò–ï –¥–µ–¥–ª–∞–π–Ω—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    )


def check_allowed_group(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.effective_chat.id != Config.ALLOWED_GROUP_ID and update.effective_chat.type != Chat.PRIVATE:
            await update.message.reply_text("‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ!")
            return
        return await func(update, context, *args, **kwargs)

    return wrapper


@check_allowed_group
async def add_deadline_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global deadlines
    try:
        args = context.args
        if len(args) < 5:
            await update.message.reply_text(
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π: /add_deadline <is_private> <subject> <title> <YYYY-MM-DD HH:mm> <desc...>\n"
                "–ò–ª–∏ /help –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞."
            )
            return

        is_private_str = args[0].lower()
        subject = args[1]
        title = args[2]
        due_date_str = args[3]
        description = " ".join(args[4:])

        is_private = (is_private_str == "true")
        try:
            due_date = datetime.strptime(due_date_str, "%Y-%m-%d %H:%M")
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–µ—Ü –¥–Ω—è
            due_date = datetime.strptime(due_date_str, "%Y-%m-%d").replace(hour=23, minute=59)

        if due_date < datetime.now():
            await update.message.reply_text("‚ùå –î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞! –í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
            return

        new_deadline_id = len(deadlines) + 1
        created_by_id = update.effective_user.id
        created_in_chat = update.effective_chat.id
        author_mention = f'<a href="tg://user?id={created_by_id}">{update.effective_user.full_name}</a>'

        new_deadline = {
            "deadline_id": new_deadline_id,
            "title": title,
            "subject": subject,
            "description": description,
            "due_date": due_date,
            "is_private": is_private,
            "created_by_id": created_by_id,
            "created_in_chat": created_in_chat,
            "author_name": update.effective_user.full_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞
        }
        deadlines.append(new_deadline)
        save_deadlines()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        schedule_deadline_reminders(new_deadline)

        msg = (
            f"‚úÖ <b>–î–µ–¥–ª–∞–π–Ω –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n"
            f"ID: {new_deadline_id}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {title}\n"
            f"–î–∞—Ç–∞: {due_date_str}\n"
            f"–¢–∏–ø: {'(–õ–∏—á–Ω—ã–π)' if is_private else '(–û–±—â–∏–π)'}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–ê–≤—Ç–æ—Ä: {author_mention}"
        )
        await update.message.reply_text(msg, parse_mode='HTML')

        if not is_private:
            global group_chat_id
            target_chat_id = group_chat_id if group_chat_id else created_in_chat
            msg_text = (
                f"‚ö†Ô∏è <b>–ù–æ–≤—ã–π –û–ë–©–ò–ô –¥–µ–¥–ª–∞–π–Ω!</b>\n"
                f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                f"–ó–∞–¥–∞–Ω–∏–µ: {title}\n"
                f"–î–∞—Ç–∞: {due_date_str}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"–ê–≤—Ç–æ—Ä: {author_mention}"
            )
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–µ –≤ –Ω–µ–π
                if update.effective_chat.type == Chat.PRIVATE:
                    await context.bot.send_message(chat_id=target_chat_id, text=msg_text, parse_mode='HTML')
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–º –¥–µ–¥–ª–∞–π–Ω–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ª–∏—á–∫—É
            for uid in known_users:
                if uid != created_by_id:
                    try:
                        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–º—É, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –¥–µ–¥–ª–∞–π–Ω
                        await context.bot.send_message(
                            chat_id=uid,
                            text=f"(–û–±—â–∏–π –¥–µ–¥–ª–∞–π–Ω) {msg_text}",
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° user_id={uid}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞.")


@check_allowed_group
async def list_deadlines_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        global deadlines
        user_id = update.effective_user.id

        if not deadlines:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞!")
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        current_date = datetime.now()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã
        filtered_deadlines = []
        
        for d in deadlines:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—á–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if d["is_private"] and d["created_by_id"] != user_id:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–¥–ª–∞–π–Ω–∞
            is_expired = d["due_date"] < current_date
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∏—Å—Ç–µ–∫—à–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã
            if not is_expired:
                filtered_deadlines.append(d)
        
        if not filtered_deadlines:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        msg = f"üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤</b>:\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        await update.message.reply_text(msg, parse_mode='HTML')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–¥–ª–∞–π–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for d in filtered_deadlines:
            try:
                date_str = d["due_date"].strftime("%Y-%m-%d %H:%M")
                try:
                    author_name = d.get('author_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    author_mention = f"<a href=\"tg://user?id={d['created_by_id']}\">{author_name}</a>"
                except:
                    author_mention = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                
                deadline_msg = (
                    f"üìå <b>ID: {d['deadline_id']}</b>\n"
                    f"üìï –ü—Ä–µ–¥–º–µ—Ç: {d['subject']}\n"
                    f"üìù –ó–∞–¥–∞–Ω–∏–µ: {d['title']}\n"
                    f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                    f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {d['description']}\n"
                    f"üîí –õ–∏—á–Ω—ã–π: {'–î–∞' if d['is_private'] else '–ù–µ—Ç'}\n"
                    f"üë§ –ê–≤—Ç–æ—Ä: {author_mention}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=deadline_msg,
                    parse_mode='HTML'
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–¥–ª–∞–π–Ω–∞: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ list_deadlines_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤.")


################################################################################
#                    APScheduler: check_deadlines JOB                          #
################################################################################

scheduler = BackgroundScheduler(timezone="Asia/Yekaterinburg")


def check_deadlines():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è"""
    logging.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è...")
    
    try:
        async def send_notifications():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
            try:
                bot = Bot(token=Config.BOT_TOKEN)
                await check_birthdays(bot)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
                import traceback
                logging.error(traceback.format_exc())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –Ω–µ–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        asyncio.run(send_notifications())
        return "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
        import traceback
        logging.error(traceback.format_exc())
        return f"–û—à–∏–±–∫–∞: {e}"


################################################################################
#                   STUDENT BOT with Deadlines                                #
################################################################################

class StudentBot:
    def __init__(self, token: str):
        try:
            self.token = token
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            Config.DATA_DIR.mkdir(parents=True, exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            self.user_manager = UserManager(Config.USERS_FILE)
            self.action_manager = ActionManager(Config.ACTIONS_FILE)
            self.cmd_handlers = CommandHandlers(
                self.user_manager,
                self.action_manager
            )
            
            logging.info("StudentBot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logging.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ StudentBot: {e}")
            import traceback
            logging.critical(traceback.format_exc())
            raise

    async def _set_commands(self, app):
        try:
            await app.bot.set_my_commands([
                BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
                BotCommand("menu", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"),
                BotCommand("help", "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –¥–µ–¥–ª–∞–π–Ω–∞–º"),
                BotCommand("set_group", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç"),
                BotCommand("add_deadline", "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω"),
                BotCommand("list_deadlines", "–°–ø–∏—Å–æ–∫ –¥–µ–¥–ª–∞–π–Ω–æ–≤"),
                BotCommand("diploma", "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –¥–∏–ø–ª–æ–º–∞"),
                BotCommand("subject", "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"),
                BotCommand("remove_deadline", "–£–¥–∞–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω")
            ])
            logging.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
            raise
        
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –±–æ—Ç–∞
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö"""
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        logging.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        import traceback
        traceback_str = ''.join(traceback.format_tb(context.error.__traceback__))
        logging.error(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n{traceback_str}")
        
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query
        if update and update.callback_query:
            try:
                await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ callback_query: {e}")
        
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif update and update.effective_chat:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

    def run(self):
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.basicConfig(format=Config.LOG_FORMAT, level=Config.LOG_LEVEL,
                            handlers=[
                                logging.StreamHandler(),
                                logging.FileHandler("bot.log", encoding="utf-8")
                            ])
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            load_deadlines()
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00
            scheduler.add_job(check_deadlines, "cron", hour=8, minute=0, 
                             misfire_grace_time=3600, coalesce=True,
                             name="–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è")

            scheduler.start()

            application = (
                ApplicationBuilder()
                .token(self.token)
                .post_init(self._set_commands)
                .build()
            )

            application.bot_data['user_manager'] = self.user_manager
            application.bot_data['action_manager'] = self.action_manager
            # –î–æ–±–∞–≤–ª—è–µ–º CommandHandlers –≤ bot_data –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ callback-—Ñ—É–Ω–∫—Ü–∏–π
            application.bot_data['command_handlers'] = self.cmd_handlers
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤
            restore_deadline_reminders()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            application.add_error_handler(self.error_handler)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
            application.add_handler(CommandHandler("start", self.cmd_handlers.start))
            application.add_handler(CommandHandler("menu", self.cmd_handlers.menu_command))
            application.add_handler(CommandHandler("help", help_command))
            application.add_handler(CommandHandler("set_group", set_group_command))
            application.add_handler(CommandHandler("add_deadline", add_deadline_command))
            application.add_handler(CommandHandler("list_deadlines", list_deadlines_command))
            application.add_handler(CommandHandler("diploma", self.cmd_handlers.diploma_cmd))
            application.add_handler(CommandHandler("subject", self.cmd_handlers.subject_cmd))
            application.add_handler(CommandHandler("remove_deadline", self._remove_deadline_cmd))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫ (–≤–∞–∂–Ω–æ: —Ä–∞–∑–º–µ—â–∞–µ–º –∏—Ö –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Ç–µ–∫—Å—Ç–∞)
            application.add_handler(CallbackQueryHandler(
                CallbackHandlers.menu_callback,
                pattern='^(calc_diploma|calc_subject|contacts|deadlines|call_beer|call_board_games|call_cinema|call_walk|pay_education)$'
            ))

            application.add_handler(CallbackQueryHandler(
                CallbackHandlers.contact_callback,
                pattern='^(contact_1|contact_2|main_menu)$'
            ))

            application.add_handler(CallbackQueryHandler(
                deadline_menu_callback,
                pattern='^(deadline_add|deadline_list|deadline_list_actual|deadline_list_expired|deadline_group|deadline_help|deadline_remove)$'
            ))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–∏ –≤ –ª–∏—á–∫–µ, –∏ –≤ –≥—Ä—É–ø–ø–µ)
            application.add_handler(MessageHandler(
                filters.TEXT & (~filters.COMMAND),
                self.cmd_handlers.handle_text
            ))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é-–∫–Ω–æ–ø–æ–∫
            application.add_handler(MessageHandler(
                filters.TEXT & (filters.COMMAND | filters.Regex(
                    r'^(üéì –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –¥–∏–ø–ª–æ–º–∞|üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏|üìö –ë–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É|üç∫ –ü–æ–∑–≤–∞—Ç—å –ø–∏—Ç—å –ø–∏–≤–æ|üé≤ –ü–æ–∑–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏|üé• –ü–æ–∑–≤–∞—Ç—å –≤ –∫–∏–Ω–æ|üö∂ –ü–æ–∑–≤–∞—Ç—å –≥—É–ª—è—Ç—å|üóì –î–µ–¥–ª–∞–π–Ω—ã)$'
                )) & (filters.ChatType.PRIVATE | filters.ChatType.GROUP | filters.ChatType.SUPERGROUP),
                self.cmd_handlers.handle_menu
            ))

            logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            application.run_polling(allowed_updates=Update.ALL_TYPES,
                                  drop_pending_updates=True,
                                  close_loop=False)
            
        except Exception as e:
            logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            import traceback
            logging.critical(traceback.format_exc())
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
            logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            import time
            time.sleep(5)
            self.run()

    async def _remove_deadline_cmd(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_deadline <ID>")
            return
        
        try:
            deadline_id = int(context.args[0])
            found_index = None
            global deadlines, group_chat_id
            removed = None

            for i, dl in enumerate(deadlines):
                if dl['deadline_id'] == deadline_id:
                    found_index = i
                    removed = dl
                    break

            if found_index is not None:
                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª—è–µ–º–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
                cancel_deadline_reminders(deadline_id)
                
                deadlines.pop(found_index)
                save_deadlines()

                remover_mention = f'<a href="tg://user?id={update.effective_user.id}">{update.effective_user.full_name}</a>'

                # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ, –≥–¥–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
                await update.message.reply_text(
                    f"‚ùå –î–µ–¥–ª–∞–π–Ω ID={deadline_id} —É–¥–∞–ª—ë–Ω!\n"
                    f"–ü—Ä–µ–¥–º–µ—Ç: {removed['subject']} / –ó–∞–¥–∞–Ω–∏–µ: {removed['title']}\n"
                    f"–£–¥–∞–ª–∏–ª(–∞): {remover_mention}",
                    parse_mode='HTML'
                )

                # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –±—ã–ª –æ–±—â–∏–π, —É–≤–µ–¥–æ–º–∏–º –≥—Ä—É–ø–ø—É –ù–ï–ó–ê–í–ò–°–ò–ú–û –æ—Ç –º–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è
                if not removed['is_private']:
                    target_chat_id = group_chat_id if group_chat_id else Config.CHAT_ID
                    text_for_group = (
                        f"‚ö†Ô∏è <b>–û–±—â–∏–π –¥–µ–¥–ª–∞–π–Ω —É–¥–∞–ª—ë–Ω!</b>\n"
                        f"ID: {deadline_id}\n"
                        f"–ü—Ä–µ–¥–º–µ—Ç: {removed['subject']}\n"
                        f"–ó–∞–¥–∞–Ω–∏–µ: {removed['title']}\n"
                        f"–î–∞—Ç–∞: {removed['due_date'].strftime('%Y-%m-%d %H:%M')}\n"
                        f"–£–¥–∞–ª–∏–ª(–∞): {remover_mention}"
                    )

                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
                        await context.bot.send_message(
                            chat_id=target_chat_id,
                            text=text_for_group,
                            parse_mode='HTML'
                        )

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ª–∏—á–∫—É
                        for user_id in known_users:
                            if user_id != update.effective_user.id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–º—É, –∫—Ç–æ —É–¥–∞–ª–∏–ª
                                try:
                                    personal_msg = (
                                                       f"‚ùå <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞</b>\n"
                                                       f"{'‚ûñ' * 20}\n\n"
                                                   ) + text_for_group

                                    await context.bot.send_message(
                                        chat_id=user_id,
                                        text=personal_msg,
                                        parse_mode='HTML'
                                    )
                                except Exception as e:
                                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ user_id={user_id}: {e}")

                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            else:
                await update.message.reply_text(
                    f"–ù–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞ —Å —Ç–∞–∫–∏–º ID: {deadline_id}"
                )
        except ValueError:
            await update.message.reply_text("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ (ID).")

        context.user_data['remove_flow_step'] = None


################################################################################
#                                  MAIN                                        #
################################################################################

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        Config.validate()
    except ValueError as e:
        logging.critical(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(format=Config.LOG_FORMAT, level=Config.LOG_LEVEL)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Config.DATA_DIR.mkdir(parents=True, exist_ok=True)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON-—Ñ–∞–π–ª–∞ —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ Excel
        json_path = Config.BIRTHDAYS_FILE
        excel_path = str(json_path).replace('.json', '.xlsx')
        
        if not os.path.exists(json_path) and os.path.exists(excel_path):
            logging.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ Excel –≤ JSON...")
            if convert_excel_to_json(excel_path, json_path):
                logging.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–¥–ª–∞–π–Ω—ã
        load_deadlines()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = StudentBot(Config.BOT_TOKEN)
        bot.run()
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback
        logging.critical(traceback.format_exc())


if __name__ == "__main__":
    main()
